# Download Virtualbox
# https://www.virtualbox.org/wiki/Downloads

# Download Ubuntu or Centos Virtual Disk Image (VDI)

# osboxes.org has many
# http://www.osboxes.org/ubuntu/
# http://www.osboxes.org/centos/
# 
# Username: osboxes
# Password: osboxes.org

# Extract 7zipped VDI file, move to desired location
# if your OS doesn't have a 7zip utility installed, you can download one from 7-zip.org
# 7za e <archive file>, or on Mac OS X, you could double click on the .7z file if using Keka 
# (Keka is available for free at https://www.keka.io/en/)

# Immediately following are instructions for the Virtualbox GUI. Command line instructions are at the end.

# Launch VirtualBox, press New button

# Name: k_grok-<username>, Type: Linux, etc.
# Use an existing virtual hard disk file, click on folder symbol to the right of the drop-down menu

# Do not power on the VM yet. Otherwise you cannot change Machine Settings
# [Virtualbox or File]->Preferences, Network, Host-only Networks, right top +
# Machine->Settings,
# System, Processors: 2, etc., whatever
# Network, Adapter 2, Enable, Attached to: Host-only Adapter

# Power on VM

# Log in as root, using password 'osboxes.org'

# Change passwords for root user and osboxes user. You can do this as root with these commands:
# passwd
# passwd osboxes

# Boot into multi-user (non-graphical mode) by default

# ln -sf /lib/systemd/system/multi-user.target /etc/systemd/system/default.target 

# If Ubuntu, then:
# click on Ubuntu button and search for "term" to get the terminal
# sudo apt-get update
# apt-get install openssh-server

# If Centos, then:
# right click on desktop, open terminal
# edit /etc/sysconfig/network-scripts/ifcfg-enp0s3 to make it look like this:
# TYPE=Ethernet
# BOOTPROTO=dhcp
# DEFROUTE=yes
# NAME=enp0s3
# UUID=<USE THE UUID IN YOUR FILE>
# DEVICE=enp0s3
# ONBOOT=yes
# service network restart
# ifconfig | grep -A2 enp0 | grep 192

# ssh from your host to your VM as user osboxes to the IP address you just grepped

# script installation:
# You can either clone the repository:
# git clone https://github.com/seanbreckenridge/k_grok
# git clone https://github.com/carlosmalt/k_grok
# Change to the config directory:
# cd k_grok/config
# Change the permissions on the virtualbox script to make it executable
# chmod +x ./virtualbox
# Run the script:
# bash -c ./virtualbox

# You could also curl the script directly:
# curl https://raw.githubusercontent.com/seanbreckenridge/k_grok/group1/config/virtualbox > virtualbox
# and then chmod, and run:
# chmod +x ./virtualbox && bash -c ./virtualbox

# Assuming you have downloaded a compressed osbox image into $VMDIR,
# and then uncompressed it with a command such as the following:
# p7zip -d Ubuntu_16.10_Yakkety-VB-64bit.7z

# Variable Init phase
export VM_DISK_DIR=$HOME/vm_disks
# Assumes the .vdi file is in $HOME/vm_disks. If you extracted
# it in $HOME/vm_disks, move it out of the folder it comes
# extracted in.
# **If this does not match the name of your file in $HOME/vm_disks, change it here.**
export VDI="$VM_DISK_DIR/Ubuntu 16.04.5 (64bit).vdi"
export VMNAME=k_grok-group1
# determine your host's primary network adapter ...
# if you are on Linux, uncomment the line below that sets
# HOST_ADAPTER, and comment the mac os x line out.
# this may work on Linux
# export HOST_ADAPTER=$(ip link show up | grep "<BROAD" | cut -f2 -d":")
# this may work on Mac OS X
export HOST_ADAPTER=$(ifconfig | grep -B4 "status: active" | grep -B3 "inet " | head -1 | cut -f1 -d":")
# Don't assume the name of the Host-Interface Network (hostonlyif) network
# since it may differ on different operating systems
export HOST_INTERFACE_NAME="vboxnet0"

# Host configuration phase
# On your host:
# You can list the Host-Interface networks on your system by running:
# vboxmanage list hostonlyifs
# You can grep the name out like so:
# vboxmanage list hostonlyifs | grep "Name:" | head -n 1
# Note if "vboxmanage hostonlyif create" is not commented out,
# after you've created a Host-Interface Network this will
# continue to successive Host-Interface networks each time this
# script is run.
vboxmanage hostonlyif create
# By default 'vboxmanage hostonlyif create' will create 'vboxnet0' or 'VirtualBox Host-Only Ethernet Adapter'
# on the first call, then 'vboxnet1' or 'VirtualBox Host-Only Ethernet Adapter #2' on the next, etc.
# If it is not vboxnet# by default, you can delete it by typing: VBoxManage hostonlyif remove <NETWORKNAME>
# It being named "VirtualBox Host-Only Ethernet Adapter" is fine as well,
# just make sure you put the name in quotes in $HOST_INTERFACE_NAME above.
# More info can be found here https://www.virtualbox.org/manual/ch08.html

# Configure DHCP server
vboxmanage dhcpserver add --ifname "$HOST_INTERFACE_NAME" --ip 192.168.56.2 --netmask 255.255.255.0 --lowerip 192.168.56.3 --upperip 192.168.56.254 --enable

# For more info about these instructions, see:
# https://www.virtualbox.org/manual/ch08.html
# http://www.howopensource.com/2011/06/how-to-use-virtualbox-in-terminal-commandline/
# http://www.edwardstafford.com/2009/09/13/virtualbox-and-bridged-networking-on-a-headless-ubuntu-server-host/
# http://serverfault.com/questions/128685/how-can-i-get-the-bridged-ip-address-of-a-virtualbox-vm-running-in-headless-mode

# Note: If you've run this script multiple times, and the script reached past
# the VM creation phase, the script is going to fail, because its already
# generated a Machine Settings file that matches the $VMNAME.
# You can reset these settings by removing the VM:
# List all VMs:
# vboxmanage list vms
# Delete the one that was misconfigured
# vboxmanage unregistervm <VMNAME | VMID> -delete
# Then, make sure the Ubuntu....(64bit).vdi file is in $VM_DISK_DIR
# and run the script again.

# VM creation phase
vboxmanage createvm --name $VMNAME --register
vboxmanage modifyvm $VMNAME --ostype Ubuntu_64
vboxmanage modifyvm $VMNAME --memory 2000

# VM storage config phase
vboxmanage storagectl $VMNAME --name SATA --add sata --portcount 2 --controller IntelAhci --bootable on
vboxmanage storageattach $VMNAME --storagectl SATA --port 0 --device 0 --type hdd --medium "$VDI"

# VM network config phase
vboxmanage modifyvm $VMNAME --nic1 nat --nictype1 virtio
vboxmanage modifyvm $VMNAME --nic2 hostonly --nictype2 82540EM
vboxmanage modifyvm $VMNAME --hostonlyadapter2 "$HOST_INTERFACE_NAME"

# VM console config phase (optional)
# send serial console to a log file
vboxmanage modifyvm $VMNAME --uart1 0x3F8 4
vboxmanage modifyvm $VMNAME --uartmode1 file /tmp/k_grok-serial.log
# this slows booting down, so if desired you can disable with
# vboxmanage modifyvm $VMNAME --uartmode1 disconnected

# VM Startup phase
# Start VM
vboxmanage startvm $VMNAME

# The password for the osboxes login in 'osboxes.org'
# On the VM:
# start a terminal (either right click or search using the first panel button)
# run the following commands:
# sudo -i (password osboxes.org)
# you may want to change the password, since this password is known to everyone:
# passwd
# passwd osboxes
# apt update && apt upgrade
# If you get an error saying "unable to lock the administration directory",
# that means another process on your computer is currently using
# apt. You can use 'ps aux | grep apt' to find those processes and kill them,
# or wait till they finish updating your system
# Look here for more information: https://askubuntu.com/questions/15433
# apt install openssh-server git
# start the sshserver by doing:
# sudo /etc/init.d/ssh start
# or 
# sudo service ssh start
# Boot into non-graphical mode by default:
# ln -sf /lib/systemd/system/multi-user.target /etc/systemd/system/default.target 
# use this command to get the IP address of the VM on the Host-Interface Network:
# ifconfig | grep -A2 enp0 | grep 192
# It's the first ip address on that line

# Leave the VM open, and on your local machine run:
# ssh osboxes@ip_address (replace ip address with the ip you just grepped on the VM above)
# Testing:
# mkdir ~/src
# cd ~/src
# git clone https://github.com/agshew/k_grok.git
